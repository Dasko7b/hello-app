name: CI/CD Pipeline - FastAPI App

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: hello-app
  MANIFESTS_REPO: Dasko7b/manifests # <-- Verifique se o nome do repo está certo
  MANIFESTS_BRANCH: main

jobs:
  # Este job faz a verificação inicial e os testes
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn

      - name: Run tests (check if app imports)
        run: |
          python -c "from main import app; print('App imported successfully')"

  # Este job constrói e envia a imagem para o Docker Hub
  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image_tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate image tag
        id: generate-tag
        run: |
          TAG="${GITHUB_SHA:0:7}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  # Este job atualiza os manifestos e cria o Pull Request
  create-pr-for-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout manifests repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MANIFESTS_REPO }}
          path: manifests-repo
          token: ${{ secrets.GH_PAT }} # <-- Usando um Personal Access Token

      - name: Update image tag in deployment.yaml
        run: |
          cd manifests-repo
          NEW_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.image_tag }}"
          sed -i "s|image:.*|image: $NEW_IMAGE|g" deployment.yaml

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_PAT }} 
          path: manifests-repo
          commit-message: "CI: Atualiza imagem para ${{ needs.build-and-push.outputs.image_tag }}"
          branch: "update-image-${{ needs.build-and-push.outputs.image_tag }}"
          base: ${{ env.MANIFESTS_BRANCH }}
          title: "CI: Atualiza imagem para ${{ needs.build-and-push.outputs.image_tag }}"
          body: "Pull Request automático gerado pelo pipeline de CI/CD."
          delete-branch: true