name: CI/CD Pipeline (com SSH)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Faz o checkout do código da aplicação
      - name: Checkout código da aplicação
        uses: actions/checkout@v4

      # 2. Faz login no Docker Hub
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Constrói e envia a imagem Docker
      - name: Build e Push da imagem Docker
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/hello-app
          TAG=$(date +%s)
          echo "Nova tag de imagem: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_NAME:$TAG .
          docker push $IMAGE_NAME:$TAG

      # 4. Configura o SSH Agent com a chave privada
      - name: Configurar SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 5. Clona o repositório de manifests usando SSH em um diretório separado
      - name: Clonar repositório de manifests via SSH
        uses: actions/checkout@v4
        with:
          repository: Dasko7b/hello-manifests
          path: manifests  # diretório separado

      # 6. Atualiza o deployment e faz o push
      - name: Atualizar Deployment com nova imagem
        run: |
          cd manifests
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/hello-app:${{ env.TAG }}|g" deployment.yaml
          
          # Configura o Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Comita e envia
          git add deployment.yaml
          git commit -m "CI: Atualizando imagem para a tag ${{ env.TAG }}"
          git push origin main
